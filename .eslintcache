[{"D:\\dev\\fd-stats\\src\\index.jsx":"1","D:\\dev\\fd-stats\\src\\App.jsx":"2","D:\\dev\\fd-stats\\src\\pages\\standings.jsx":"3","D:\\dev\\fd-stats\\src\\pages\\transactions.jsx":"4","D:\\dev\\fd-stats\\src\\pages\\year-range.jsx":"5","D:\\dev\\fd-stats\\src\\data.js":"6","D:\\dev\\fd-stats\\src\\reportWebVitals.js":"7"},{"size":479,"mtime":1609049829487,"results":"8","hashOfConfig":"9"},{"size":1559,"mtime":1609214364154,"results":"10","hashOfConfig":"9"},{"size":4676,"mtime":1609213264093,"results":"11","hashOfConfig":"9"},{"size":154,"mtime":1609051003205,"results":"12","hashOfConfig":"9"},{"size":970,"mtime":1609207980780,"results":"13","hashOfConfig":"9"},{"size":136,"mtime":1609076890813,"results":"14","hashOfConfig":"9"},{"size":364,"mtime":1609078875122,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1ttoha6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\dev\\fd-stats\\src\\index.jsx",[],["32","33"],"D:\\dev\\fd-stats\\src\\App.jsx",[],"D:\\dev\\fd-stats\\src\\pages\\standings.jsx",["34","35"],"import { useEffect, useState } from 'react'\r\n\r\nimport { Table } from 'antd'\r\nimport { YEARS } from 'data.js'\r\nimport { YearRange } from './year-range'\r\n\r\nexport default function Standings() {\r\n  const [owners, setOwners] = useState({})\r\n  const [store, setStore] = useState([])\r\n  const [proxyStore, setProxyStore] = useState([])\r\n  const [years, setYears] = useState({\r\n    from: YEARS[0],\r\n    to: YEARS[YEARS.length - 1],\r\n  })\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Owner',\r\n      key: 'owner',\r\n      dataIndex: 'owner',\r\n    },\r\n    {\r\n      title: 'Points For',\r\n      key: 'pointsFor',\r\n      dataIndex: 'pointsFor',\r\n      sorter: (a, b) => a.pointsFor - b.pointsFor,\r\n      render: (text) => Number(text).toLocaleString(),\r\n    },\r\n    {\r\n      title: 'Points Against',\r\n      key: 'pointsAgainst',\r\n      dataIndex: 'pointsAgainst',\r\n      sorter: (a, b) => a.pointsAgainst - b.pointsAgainst,\r\n      render: (text) => Number(text).toLocaleString(),\r\n    },\r\n    {\r\n      title: 'Wins',\r\n      key: 'wins',\r\n      dataIndex: 'wins',\r\n      sorter: (a, b) => a.wins - b.wins,\r\n    },\r\n    {\r\n      title: 'Losses',\r\n      key: 'losses',\r\n      dataIndex: 'losses',\r\n      sorter: (a, b) => a.losses - b.losses,\r\n    },\r\n    {\r\n      title: 'Games',\r\n      key: 'games',\r\n      dataIndex: 'wins',\r\n      render: function (text, record) {\r\n        return record.wins + record.losses\r\n      },\r\n      sorter: (a, b) => a.wins + a.losses - (b.wins + b.losses),\r\n    },\r\n    {\r\n      title: 'Playoff Wins',\r\n      key: 'playoffWins',\r\n      dataIndex: 'playoffWins',\r\n      sorter: (a, b) => a.playoffWins - b.playoffWins,\r\n    },\r\n    {\r\n      title: 'Playoff Losses',\r\n      key: 'playoffLosses',\r\n      dataIndex: 'playoffLosses',\r\n      sorter: (a, b) => a.playoffLosses - b.playoffLosses,\r\n    },\r\n    {\r\n      title: 'Playoff Games',\r\n      key: 'playoffGames',\r\n      dataIndex: 'playoffWins',\r\n      render: function (text, record) {\r\n        return record.playoffWins + record.playoffLosses\r\n      },\r\n      sorter: (a, b) =>\r\n        a.playoffWins + a.playoffLosses - b.playoffWins - b.playoffLosses,\r\n    },\r\n    {\r\n      title: 'Championships',\r\n      key: 'championships',\r\n      dataIndex: 'championships',\r\n      sorter: (a, b) => a.championships - b.championships,\r\n    },\r\n  ]\r\n\r\n  function filterData() {\r\n    const teams = {}\r\n    console.log(store)\r\n    store.forEach((season) => {\r\n      season.forEach((row) => {\r\n        if (row.year < years.from || row.year > years.to) {\r\n          return\r\n        }\r\n\r\n        const id = row.owners[0].id\r\n        const team = teams[id] || {\r\n          pointsFor: 0,\r\n          pointsAgainst: 0,\r\n          wins: 0,\r\n          losses: 0,\r\n          games: 0,\r\n          playoffWins: 0,\r\n          playoffLosses: 0,\r\n          playoffGames: 0,\r\n          championships: 0,\r\n          owner: row.owners[0].displayName,\r\n          key: id,\r\n        }\r\n        teams[id] = team\r\n\r\n        team.pointsFor += row.pointsFor.value\r\n        team.pointsAgainst += row.pointsAgainst.value\r\n        team.wins += row.recordOverall.wins || 0\r\n        team.losses += row.recordOverall.losses || 0\r\n        team.playoffWins += row.recordPostseason.wins || 0\r\n        team.playoffLosses += row.recordPostseason.losses || 0\r\n        if (row.recordOverall.rank === 1) {\r\n          team.championships += 1\r\n        }\r\n      })\r\n    })\r\n\r\n    setProxyStore(Object.values(teams))\r\n  }\r\n\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    // console.log('params', pagination, filters, sorter, extra)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch('/data/owners.json')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setOwners(data)\r\n      })\r\n      .then(() => {\r\n        Promise.all(\r\n          YEARS.map((year) =>\r\n            fetch(`/data/standings/${year}.json?year=${year}`)\r\n              .then((response) => response.json())\r\n              .then((json) =>\r\n                json.map((obj) => {\r\n                  obj.year = year\r\n                  return obj\r\n                }),\r\n              ),\r\n          ),\r\n        )\r\n          .then((json) => {\r\n            setStore(json)\r\n            console.log(json)\r\n          })\r\n          .catch((error) => console.log(error))\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(years)\r\n  }, [years])\r\n\r\n  useEffect(() => {\r\n    if (store.length > 0) {\r\n      filterData()\r\n    }\r\n  }, [store, years])\r\n\r\n  return (\r\n    <>\r\n      <YearRange\r\n        filterChange={(from, to) => setYears({ from: from, to: to })}\r\n      />\r\n      <hr />\r\n      <Table dataSource={proxyStore} columns={columns} onChange={onChange} />\r\n    </>\r\n  )\r\n}\r\n","D:\\dev\\fd-stats\\src\\pages\\transactions.jsx",[],"D:\\dev\\fd-stats\\src\\pages\\year-range.jsx",[],"D:\\dev\\fd-stats\\src\\data.js",[],"D:\\dev\\fd-stats\\src\\reportWebVitals.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":8,"column":10,"nodeType":"42","messageId":"43","endLine":8,"endColumn":16},{"ruleId":"44","severity":1,"message":"45","line":166,"column":6,"nodeType":"46","endLine":166,"endColumn":20,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'owners' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'filterData'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [filterData, store, years]",{"range":"53","text":"54"},[4428,4442],"[filterData, store, years]"]
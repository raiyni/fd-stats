{"version":3,"sources":["redux/reducers/standings.js","pages/transactions.jsx","App.jsx","reportWebVitals.js","redux/reducers/index.js","redux/store.js","index.jsx"],"names":["fetchYear","createAsyncThunk","year","thunkAPI","a","axios","get","response","data","slice","createSlice","name","initialState","store","from","to","loading","reducers","setYears","state","action","payload","finishedLoading","extraReducers","fulfilled","Array","prototype","push","apply","map","row","meta","arg","pointsFor","value","pointsAgainst","wins","recordOverall","losses","playoffWins","recordPostseason","playoffLosses","championships","rank","owner","owners","displayName","id","actions","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","standings","createStore","rootReducer","composeWithDevTools","applyMiddleware","logger","thunk","ReactDOM","render","document","getElementById"],"mappings":"0RAYMA,EAAYC,YAChB,sBADgC,uCAEhC,WAAOC,EAAMC,GAAb,eAAAC,EAAA,sEACyBC,IAAMC,IAAN,0BAA6BJ,EAA7B,UADzB,cACQK,EADR,yBAESA,EAASC,MAFlB,2CAFgC,yDAa5BC,EAAQC,YAAY,CACxBC,KAAM,YACNC,aAtBmB,CACnBC,MAAO,GACPC,KAAM,KACNC,GAAI,KACJC,SAAS,GAmBTC,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChBD,EAAML,KAAOM,EAAOC,QAAQP,KAC5BK,EAAMJ,GAAKK,EAAOC,QAAQN,IAE5BO,gBAAiB,SAACH,EAAOC,GACvBD,EAAMH,SAAU,IAGpBO,cAAc,eACXvB,EAAUwB,WAAY,SAACL,EAAOC,GAC7BK,MAAMC,UAAUC,KAAKC,MACnBT,EAAMN,MACNO,EAAOC,QAAQQ,KAAI,SAACC,GAClB,MAAO,CACL5B,KAAMkB,EAAOW,KAAKC,IAClBC,UAAWH,EAAIG,UAAUC,MACzBC,cAAeL,EAAIK,cAAcD,MACjCE,KAAMN,EAAIO,cAAcD,MAAQ,EAChCE,OAAQR,EAAIO,cAAcC,QAAU,EACpCC,YAAaT,EAAIU,iBAAiBJ,MAAQ,EAC1CK,cAAeX,EAAIU,iBAAiBF,QAAU,EAC9CI,cAA0C,IAA3BZ,EAAIO,cAAcM,KAAa,EAAI,EAClDC,MAAOd,EAAIe,OAAO,GAAGC,YACrBC,GAAIjB,EAAIe,OAAO,GAAGE,aAUftC,GAFaA,EAAMuC,QAAnB9B,SAEAT,EAAf,S,gCC5D0CwC,YC6D3BC,MAjDf,WACE,OACE,sBAAKC,UAAU,yBAAf,UACE,qBAAKA,UAAU,SAAf,oBACA,qBAAKA,UAAU,SAAf,oBACA,6C,gBCPSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gCCJCQ,4BAAgB,CAAEC,c,OCSlBjD,EALDkD,sBACZC,EACAC,8BAAoBC,0BAAgBC,IAAQC,OCA9CC,IAASC,OACP,cAAC,IAAD,CAAUzD,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF0D,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.8f70ea91.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\n\r\nimport { YEARS } from './../../data'\r\nimport axios from 'axios'\r\n\r\nconst initialState = {\r\n  store: [],\r\n  from: 2008,\r\n  to: 2020,\r\n  loading: true\r\n}\r\n\r\nconst fetchYear = createAsyncThunk(\r\n  'standings/fetchYear',\r\n  async (year, thunkAPI) => {\r\n    const response = await axios.get(`/data/standings/${year}.json`)\r\n    return response.data\r\n  }\r\n)\r\n\r\nexport const fetchStandings = async (dispatch) => {\r\n  await Promise.all(YEARS.map((year) => dispatch(fetchYear(year))))\r\n  dispatch(slice.actions.finishedLoading())\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'standings',\r\n  initialState,\r\n  reducers: {\r\n    setYears: (state, action) => {\r\n      state.from = action.payload.from\r\n      state.to = action.payload.to\r\n    },\r\n    finishedLoading: (state, action) => {\r\n      state.loading = false\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [fetchYear.fulfilled]: (state, action) => {\r\n      Array.prototype.push.apply(\r\n        state.store,\r\n        action.payload.map((row) => {\r\n          return {\r\n            year: action.meta.arg,\r\n            pointsFor: row.pointsFor.value,\r\n            pointsAgainst: row.pointsAgainst.value,\r\n            wins: row.recordOverall.wins || 0,\r\n            losses: row.recordOverall.losses || 0,\r\n            playoffWins: row.recordPostseason.wins || 0,\r\n            playoffLosses: row.recordPostseason.losses || 0,\r\n            championships: row.recordOverall.rank === 1 ? 1 : 0,\r\n            owner: row.owners[0].displayName,\r\n            id: row.owners[0].id\r\n          }\r\n        })\r\n      )\r\n    }\r\n  }\r\n})\r\n\r\nexport const { setYears } = slice.actions\r\n\r\nexport default slice.reducer\r\n","import { Component } from 'react';\r\n\r\nexport default class Transactions extends Component {\r\n  render() {\r\n    return <span>Transactions</span>;\r\n  }\r\n}\r\n","import './App.css'\r\n\r\nimport {\r\n  NavLink,\r\n  Redirect,\r\n  Route,\r\n  HashRouter as Router,\r\n  Switch\r\n} from 'react-router-dom'\r\n\r\nimport React from 'react'\r\nimport Standings from 'pages/standings'\r\nimport Transactions from 'pages/transactions'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"p-d-flex p-flex-column\">\r\n      <div className=\"p-mb-2\">Item 1</div>\r\n      <div className=\"p-mb-2\">Item 2</div>\r\n      <div>Item 3</div>\r\n    </div>\r\n    /* <Router>\r\n      <Layout style={{ height: '100vh' }} className=\"layout\">\r\n        <Header>\r\n          <span\r\n            style={{\r\n              float: 'left',\r\n              color: 'white',\r\n              fontSize: '1.5em',\r\n              marginRight: '10px'\r\n            }}\r\n          >\r\n            Fantasy Dutchmen\r\n          </span>\r\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n            <Menu.Item key=\"standings\">\r\n              <NavLink to={{ pathname: '/standings' }}> Standings </NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"transactions\">\r\n              <NavLink to={{ pathname: '/transactions' }}>\r\n                {' '}\r\n                Transactions{' '}\r\n              </NavLink>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Header>\r\n        <Content style={{ padding: '50px' }}>\r\n          <Switch>\r\n            <Route exact path=\"/\" render={() => <Redirect to=\"/standings\" />} />\r\n            <Route path=\"/standings\">\r\n              <Standings />\r\n            </Route>\r\n            <Route path=\"/transactions\">\r\n              <Transactions />\r\n            </Route>\r\n          </Switch>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}></Footer>\r\n      </Layout>\r\n    </Router> */\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux'\r\nimport standings from './standings'\r\n\r\nexport default combineReducers({ standings })\r\n","import { applyMiddleware, createStore } from '@reduxjs/toolkit'\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(logger, thunk))\r\n)\r\n\r\nexport default store\r\n","import './index.css'\r\n\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}